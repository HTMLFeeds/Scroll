"use strict";
class FilaTauri extends Fila {
    /** */
    static async use() {
        let path = null;
        try {
            path = globalThis.__TAURI__.path;
        }
        catch (e) {
            console.log("withGlobalTauri is not set");
            return;
        }
        let cwd = "/";
        let tmp = "/";
        try {
            cwd = await path.appDataDir();
            tmp = await path.appCacheDir();
        }
        catch (e) {
            console.error("The Tauri environment doesn't have access to the path APIs");
        }
        Fila.setDefaults(FilaTauri, path?.sep || "", cwd, tmp);
    }
    /** */
    fs = globalThis.__TAURI__.fs;
    /** */
    readText() {
        return this.fs.readTextFile(this.path);
    }
    /** */
    readBinary() {
        return this.fs.readBinaryFile(this.path);
    }
    /** */
    async readDirectory() {
        const fileNames = await this.fs.readDir(this.path);
        const filas = [];
        for (const fileName of fileNames)
            if (fileName.name !== ".DS_Store")
                filas.push(Fila.new(this.path, fileName.name || ""));
        return filas;
    }
    /** */
    async writeText(text, options) {
        try {
            const up = this.up();
            if (!await up.exists())
                await up.writeDirectory();
            await this.fs.writeTextFile(this.path, text, {
                append: options?.append
            });
        }
        catch (e) {
            debugger;
        }
    }
    /** */
    async writeBinary(arrayBuffer) {
        await this.up().writeDirectory();
        await this.fs.writeBinaryFile(this.path, arrayBuffer);
    }
    /** */
    async writeDirectory() {
        this.fs.createDir(this.path, { recursive: true });
    }
    /**
     * Writes a symlink file at the location represented by the specified
     * Fila object, to the location specified by the current Fila object.
     */
    async writeSymlink(at) {
        return null;
    }
    /**
     * Deletes the file or directory that this Fila object represents.
     */
    async delete() {
        if (await this.isDirectory()) {
            return new Promise(async (resolve) => {
                await this.fs.removeDir(this.path, { recursive: true });
                resolve();
            });
        }
        await this.fs.removeFile(this.path);
    }
    /** */
    move(target) {
        return null;
    }
    /** */
    async copy(target) {
        if (await target.isDirectory())
            throw "Copying directories is not implemented.";
        await this.fs.copyFile(this.path, target.path);
    }
    /** */
    watchProtected(recursive, callbackFn) {
        let un = null;
        (async () => {
            un = await FilaTauri.watchInternal(this.path, {}, async (ev) => {
                if (!un)
                    return;
                const payload = ev.payload.payload;
                if (typeof payload !== "string")
                    return;
                const fila = Fila.new(ev.payload.payload);
                if (ev.type === "NoticeWrite" || ev.type === "Write")
                    callbackFn("modify" /* Fila.Event.modify */, fila);
                else if (ev.type === "NoticeRemove" || ev.type === "Remove")
                    callbackFn("delete" /* Fila.Event.delete */, fila);
                else if (ev.type === "Create" || ev.type === "Rename")
                    callbackFn("modify" /* Fila.Event.modify */, fila);
            });
        })();
        return () => {
            // This is hacky... the interface expects a function to be
            // returned rather than a promise that resolves to one,
            // so this waits 100ms to call the un() function if this unwatch
            // function is invoked immediately after calling watch().
            if (un)
                un();
            else
                setTimeout(() => un?.(), 100);
        };
    }
    /** */
    async rename(newName) {
        // Note that the "renameFile" method actually works on directories
        return this.fs.renameFile(this.path, this.up().down(newName).path);
    }
    /** */
    async exists() {
        return this.fs.exists(this.path);
    }
    /** */
    async getSize() {
        return (await this.getMeta()).size;
    }
    /** */
    async getModifiedTicks() {
        return (await this.getMeta()).modifiedAt;
    }
    /** */
    async getCreatedTicks() {
        return (await this.getMeta()).createdAt;
    }
    /** */
    async getAccessedTicks() {
        return (await this.getMeta()).accessedAt;
    }
    /** */
    async isDirectory() {
        return (await this.getMeta()).isDir;
    }
    /** */
    async getMeta() {
        return this._meta || (this._meta = await FilaTauri.getMetadata(this.path));
    }
    _meta = null;
}
(function (FilaTauri) {
    //@ts-ignore
    if (!("__TAURI__" in globalThis))
        return;
    const t = globalThis.__TAURI__;
    const tauri = t.tauri;
    const wind = t.window;
    /** @internal */
    async function unwatch(id) {
        await tauri.invoke('plugin:fs-watch|unwatch', { id });
    }
    FilaTauri.unwatch = unwatch;
    /** @internal */
    async function watchInternal(paths, options, callbackFn) {
        const opts = {
            recursive: false,
            delayMs: 2000,
            ...options,
        };
        let watchPaths;
        if (typeof paths === "string")
            watchPaths = [paths];
        else
            watchPaths = paths;
        const id = window.crypto.getRandomValues(new Uint32Array(1))[0];
        await tauri.invoke("plugin:fs-watch|watch", {
            id,
            paths: watchPaths,
            options: opts,
        });
        const unlisten = await wind.appWindow.listen(`watcher://raw-event/${id}`, event => {
            callbackFn(event);
        });
        return async () => {
            await unwatch(id);
            unlisten();
        };
    }
    FilaTauri.watchInternal = watchInternal;
    /** @internal */
    async function watchImmediate(paths, options, callbackFn) {
        const opts = {
            recursive: false,
            ...options,
            delayMs: null
        };
        const watchPaths = typeof paths === "string" ? [paths] : paths;
        const id = window.crypto.getRandomValues(new Uint32Array(1))[0];
        await tauri.invoke("plugin:fs-watch|watch", {
            id,
            paths: watchPaths,
            options: opts,
        });
        const unlisten = await wind.appWindow.listen(`watcher://raw-event/${id}`, event => {
            callbackFn(event);
        });
        return async () => {
            await unwatch(id);
            unlisten();
        };
    }
    FilaTauri.watchImmediate = watchImmediate;
    /** @internal */
    function getMetadata(path) {
        return tauri.invoke("plugin:fs-extra|metadata", { path });
    }
    FilaTauri.getMetadata = getMetadata;
    typeof module === "object" && Object.assign(module.exports, { FilaTauri });
})(FilaTauri || (FilaTauri = {}));
//# sourceMappingURL=data:application/json;base64,