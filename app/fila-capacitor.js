"use strict";
class FilaCapacitor extends Fila {
    /** */
    static async use() {
        const cwd = this.directory.data;
        const tmp = this.directory.cache;
        const sep = "/";
        Fila.setDefaults(FilaCapacitor, sep, cwd, tmp);
    }
    /** Values copied from Capacitor. */
    static directory = {
        cache: "CACHE",
        data: "DATA",
        documents: "DOCUMENTS",
        external: "EXTERNAL",
        externalStorage: "EXTERNAL_STORAGE",
        library: "LIBRARY",
    };
    /** */
    get fs() {
        const g = globalThis;
        const fs = g.Capacitor?.Plugins?.Filesystem;
        if (!fs)
            throw new Error("Filesystem plugin not added to Capacitor.");
        return fs;
    }
    /**
     * Gets the fully-qualified path, including any file name to the
     * file system object being represented by this Fila object.
     */
    get path() {
        return Fila.join(...this.components);
    }
    /** */
    async readText() {
        const result = await this.fs.readFile({
            ...this.getDefaultOptions(),
            encoding: "utf8"
        });
        return result.data;
    }
    /** */
    async readBinary() {
        const result = await this.fs.readFile({
            ...this.getDefaultOptions(),
            encoding: "ascii"
        });
        const base64 = result.data;
        return Uint8Array.from(atob(base64), c => c.charCodeAt(0));
    }
    /** */
    async readDirectory() {
        const result = await this.fs.readdir(this.getDefaultOptions());
        const filas = [];
        for (const file of result.files)
            if (file.name !== ".DS_Store")
                filas.push(Fila.new(this.path, file.name || ""));
        return filas;
    }
    /** */
    async writeText(text, options) {
        try {
            const up = this.up();
            if (!await up.exists())
                await up.writeDirectory();
            const writeOptions = {
                ...this.getDefaultOptions(),
                data: text,
                encoding: "utf8"
            };
            if (options?.append)
                await this.fs.appendFile(writeOptions);
            else
                await this.fs.writeFile(writeOptions);
        }
        catch (e) {
            console.error("Write failed to path: " + this.path);
            debugger;
        }
    }
    /** */
    async writeBinary(arrayBuffer) {
        await this.up().writeDirectory();
        const data = await this.arrayBufferToBase64(arrayBuffer);
        await this.fs.writeFile({
            ...this.getDefaultOptions(),
            data,
            encoding: "ascii"
        });
    }
    /** */
    arrayBufferToBase64(buffer) {
        return new Promise(r => {
            const blob = new Blob([buffer], { type: "application/octet-binary" });
            const reader = new FileReader();
            reader.onload = ev => {
                const dataUrl = (ev.target?.result || "");
                const slice = dataUrl.slice(dataUrl.indexOf(`,`) + 1);
                r(slice);
            };
            reader.readAsDataURL(blob);
        });
    }
    /** */
    async writeDirectory() {
        await this.fs.mkdir({
            ...this.getDefaultOptions(),
            recursive: true
        });
    }
    /**
     * Writes a symlink file at the location represented by the specified
     * Fila object, to the location specified by the current Fila object.
     */
    async writeSymlink(at) {
        throw new Error("Not implemented");
    }
    /**
     * Deletes the file or directory that this Fila object represents.
     */
    async delete() {
        if (await this.isDirectory()) {
            return new Promise(async (r) => {
                await this.fs.rmdir({
                    ...this.getDefaultOptions(),
                    recursive: true
                });
                r();
            });
        }
        await this.fs.deleteFile(this.getDefaultOptions());
    }
    /** */
    async move(target) {
        throw new Error("Not implemented.");
    }
    /** */
    async copy(target) {
        const fromOptions = this.getDefaultOptions();
        const toOptions = this.getDefaultOptions(target.path);
        await this.fs.copy({
            from: fromOptions.path,
            directory: fromOptions.directory,
            to: toOptions.path,
            toDirectory: toOptions.directory,
        });
    }
    /** */
    async rename(newName) {
        const target = this.up().down(newName).path;
        const fromOptions = this.getDefaultOptions();
        const toOptions = this.getDefaultOptions(target);
        await this.fs.rename({
            from: this.path,
            directory: fromOptions.directory,
            to: target,
            toDirectory: toOptions.directory
        });
    }
    /** */
    watchProtected(recursive, callbackFn) {
        throw new Error("Not implemented");
    }
    /** */
    async exists() {
        return !!await this.getStat();
    }
    /** */
    async getSize() {
        return (await this.getStat())?.size || 0;
    }
    /** */
    async getModifiedTicks() {
        return (await this.getStat())?.mtime || 0;
    }
    /** */
    async getCreatedTicks() {
        return (await this.getStat())?.ctime || 0;
    }
    /** */
    async getAccessedTicks() {
        return 0;
    }
    /** */
    async isDirectory() {
        return (await this.getStat())?.type === "directory";
    }
    /** */
    async getStat() {
        try {
            return await this.fs.stat(this.getDefaultOptions());
        }
        catch (e) {
            return null;
        }
    }
    /** */
    getDefaultOptions(targetPath = this.path) {
        const slash = targetPath.indexOf("/");
        let path = "";
        let directory = "";
        if (slash < 0) {
            path = targetPath;
            directory = FilaCapacitor.directory.cache;
        }
        else {
            path = targetPath.slice(slash + 1);
            directory = targetPath.slice(0, slash);
        }
        const result = {
            path,
            directory: directory
        };
        return result;
    }
}
(function (FilaCapacitor) {
    typeof module === "object" && Object.assign(module.exports, { FilaCapacitor });
})(FilaCapacitor || (FilaCapacitor = {}));
//# sourceMappingURL=data:application/json;base64,