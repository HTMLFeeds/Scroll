"use strict";
class FilaNode extends Fila {
    /** */
    static use() {
        const sep = require("path").sep;
        const cwd = process.cwd();
        const tmp = require("os").tmpdir();
        Fila.setDefaults(FilaNode, sep, cwd, tmp);
    }
    /** */
    fs = require("fs");
    /** */
    async readText() {
        return await this.fs.promises.readFile(this.path, "utf8");
    }
    /** */
    async readBinary() {
        return await this.fs.promises.readFile(this.path);
    }
    /** */
    async readDirectory() {
        const fileNames = await this.fs.promises.readdir(this.path);
        const filas = [];
        for (const fileName of fileNames)
            if (fileName !== ".DS_Store")
                filas.push(Fila.new(...this.components, fileName));
        return filas;
    }
    /** */
    async writeText(text, options) {
        await this.up().writeDirectory();
        if (options?.append)
            await this.fs.promises.appendFile(this.path, text);
        else
            await this.fs.promises.writeFile(this.path, text);
    }
    /** */
    async writeBinary(arrayBuffer) {
        await this.up().writeDirectory();
        const buffer = Buffer.from(arrayBuffer);
        await this.fs.promises.writeFile(this.path, buffer);
    }
    /** */
    async writeDirectory() {
        if (!this.fs.existsSync(this.path))
            await this.fs.promises.mkdir(this.path, { recursive: true });
    }
    /**
     * Writes a symlink file at the location represented by the specified
     * Fila object, to the location specified by the current Fila object.
     */
    async writeSymlink(at) {
        return new Promise(r => {
            this.fs.symlink(this.path, at.path, () => {
                r();
            });
        });
    }
    /**
     * Deletes the file or directory that this Fila object represents.
     */
    async delete() {
        if (await this.isDirectory()) {
            return new Promise(resolve => {
                this.fs.rmdir(this.path, { recursive: true }, error => {
                    resolve(error || void 0);
                });
            });
        }
        await this.fs.promises.unlink(this.path);
    }
    /** */
    move(target) {
        return new Promise(resolve => {
            this.fs.rename(this.path, target.path, () => resolve());
        });
    }
    /** */
    copy(target) {
        return new Promise(async (resolve) => {
            if (await target.isDirectory()) {
                throw "Copying directories is not implemented. " + target.path;
            }
            const dir = target.up();
            if (!await dir.exists())
                await new Promise(r => this.fs.mkdir(dir.path, { recursive: true }, r));
            this.fs.copyFile(this.path, target.path, () => resolve());
        });
    }
    /** */
    watchProtected(recursive, callbackFn) {
        const watcher = FilaNode.chokidar.watch(this.path);
        watcher.on("ready", () => {
            watcher.on("all", (evName, path) => {
                if (path.endsWith("/.DS_Store"))
                    return;
                let ev;
                if (evName === "add")
                    ev = "create" /* Fila.Event.create */;
                else if (evName === "change")
                    ev = "modify" /* Fila.Event.modify */;
                else if (evName === "unlink")
                    ev = "delete" /* Fila.Event.delete */;
                if (ev)
                    callbackFn(ev, Fila.new(path));
            });
        });
        return () => { watcher.removeAllListeners(); };
    }
    /** */
    static get chokidar() {
        return this._chokidar || (this._chokidar = require("chokidar"));
    }
    static _chokidar;
    /** */
    rename(newName) {
        return this.fs.promises.rename(this.path, this.up().down(newName).path);
    }
    /** */
    async exists() {
        return new Promise(r => {
            this.fs.stat(this.path, error => {
                r(!error);
            });
        });
    }
    /** */
    async getSize() {
        const stats = await this.getStats();
        return stats?.size || 0;
    }
    /** */
    async getModifiedTicks() {
        const stats = await this.getStats();
        return stats?.mtimeMs || 0;
    }
    /** */
    async getCreatedTicks() {
        const stats = await this.getStats();
        return stats?.birthtimeMs || 0;
    }
    /** */
    async getAccessedTicks() {
        const stats = await this.getStats();
        return stats?.atimeMs || 0;
    }
    /** */
    async isDirectory() {
        const stats = await this.getStats();
        return stats?.isDirectory() || false;
    }
    /** */
    async getStats() {
        return new Promise(r => {
            this.fs.stat(this.path, (error, stats) => {
                r(stats);
            });
        });
    }
}
typeof module === "object" && Object.assign(module.exports, { FilaNode });
//# sourceMappingURL=data:application/json;base64,